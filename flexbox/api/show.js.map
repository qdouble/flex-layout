{"version":3,"sources":["flexbox/api/show.ts"],"names":[],"mappings":"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","file":"show.js","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer,\n  SimpleChanges,\n  Self,\n  Optional,\n  Inject,\n  forwardRef\n} from '@angular/core';\n\nimport {MediaQueryActivation} from '../media-query/media-query-activation';\nimport {MediaQueryAdapter} from '../media-query/media-query-adapter';\nimport {MediaQueryChanges, OnMediaQueryChanges} from '../media-query/media-query-changes';\nimport {BaseFxDirective} from './base';\nimport {HideDirective} from \"./hide\";\n\n\nconst FALSY = ['false', false, 0];\n\n/**\n * 'show' Layout API directive\n *\n */\n@Directive({selector: '[fx-show]'})\nexport class ShowDirective extends BaseFxDirective implements OnInit, OnChanges,\n                                                                 OnMediaQueryChanges {\n  /**\n   * Original dom Elements CSS display style\n   */\n  private _display = 'flex';\n\n  /**\n   * MediaQuery Activation Tracker\n   */\n  private _mqActivation: MediaQueryActivation;\n\n  /**\n   * Default layout property with default visible === true\n   */\n  @Input('fx-show') show = true;\n\n  // *******************************************************\n  // Optional input variations to support mediaQuery triggers\n  // *******************************************************\n\n  @Input('fx-show.xs') showXs;\n  @Input('fx-show.gt-xs') showGtXs;\n  @Input('fx-show.sm') showSm;\n  @Input('fx-show.gt-sm') showGtSm;\n  @Input('fx-show.md') showMd;\n  @Input('fx-show.gt-md') showGtMd;\n  @Input('fx-show.lg') showLg;\n  @Input('fx-show.gt-lg') showGtLg;\n  @Input('fx-show.xl') showXl;\n\n  /**\n   *\n   */\n  constructor(\n      private _mqa: MediaQueryAdapter,\n      @Inject(forwardRef(() => HideDirective)) @Optional() @Self() private _hideDirective,\n      protected elRef: ElementRef, protected renderer: Renderer) {\n    super(elRef, renderer);\n  }\n\n  /**\n    * Does the current element also use the fx-show API ?\n    */\n   protected get usesHideAPI() {\n     return !!this._hideDirective;\n   }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fx-show')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    let activated = this._mqActivation;\n    let activationChange = activated && changes[activated.activatedInputKey] != null;\n    if (changes['show'] != null || activationChange) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._mqActivation = this._mqa.attach(this, 'show', true);\n    this._updateWithValue();\n  }\n\n  /**\n   *  Special mql callback used by MediaQueryActivation when a mql event occurs\n   */\n  onMediaQueryChanges(changes: MediaQueryChanges) {\n    setTimeout(() => this._updateWithValue(changes.current.value), 1);\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** Validate the visibility value and then update the host's inline display style */\n  _updateWithValue(value?: string|number|boolean) {\n    value = value || this.show || true;\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    let shouldShow = this._validateTruthy(value);\n    if ( shouldShow || !this.usesHideAPI ) {\n      this._applyStyleToElement(this._buildCSS(shouldShow));\n    }\n  }\n\n\n  /** Build the CSS that should be assigned to the element instance */\n  _buildCSS(show) {\n    return {'display': show ? this._display : 'none'};\n  }\n\n  /**  Validate the to be not FALSY */\n  _validateTruthy(show) {\n    return (FALSY.indexOf(show) == -1)\n  }\n}\n"]}
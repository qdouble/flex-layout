{"version":3,"sources":["flexbox/api/flex-order.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EACL,SAAS,EACT,UAAU,EACV,KAAK,EAGL,QAAQ,EAET,MAAM,eAAe;OAEf,EAAC,iBAAiB,EAAC,MAAM,oCAAoC;OAE7D,EAAC,eAAe,EAAC,MAAM,QAAQ;AAEtC;;;;GAIG;AAEH;IAAwC,sCAAe;IAuBrD,4BAAoB,IAAuB,EAAE,KAAiB,EAAE,QAAkB;QAChF,kBAAM,KAAK,EAAE,QAAQ,CAAC,CAAC;QADL,SAAI,GAAJ,IAAI,CAAmB;IAE3C,CAAC;IAED,gDAAgD;IAChD,oBAAoB;IACpB,gDAAgD;IAEhD;;OAEG;IACH,wCAAW,GAAX,UAAY,OAAsB;QAChC,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;QACnC,IAAI,gBAAgB,GAAG,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;QAEjF,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,gBAAgB,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,qCAAQ,GAAR;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,gDAAmB,GAAnB,UAAoB,OAA0B;QAC5C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED,gDAAgD;IAChD,oBAAoB;IACpB,gDAAgD;IAEhD,6CAAgB,GAAhB,UAAiB,KAAc;QAC7B,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC;QACnC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;IAGD,sCAAS,GAAT,UAAU,KAAK;QACb,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,EAAC,CAAC;IAC3C,CAAC;IArED;QAAC,KAAK,CAAC,eAAe,CAAC;;qDAAA;IAMvB;QAAC,KAAK,CAAC,kBAAkB,CAAC;;uDAAA;IAC1B;QAAC,KAAK,CAAC,qBAAqB,CAAC;;yDAAA;IAC7B;QAAC,KAAK,CAAC,kBAAkB,CAAC;;uDAAA;IAC1B;QAAC,KAAK,CAAC,qBAAqB,CAAC;;yDAAA;IAC7B;QAAC,KAAK,CAAC,kBAAkB,CAAC;;uDAAA;IAC1B;QAAC,KAAK,CAAC,qBAAqB,CAAC;;yDAAA;IAC7B;QAAC,KAAK,CAAC,kBAAkB,CAAC;;uDAAA;IAC1B;QAAC,KAAK,CAAC,qBAAqB,CAAC;;yDAAA;IAC7B;QAAC,KAAK,CAAC,kBAAkB,CAAC;;uDAAA;IAtB5B;QAAC,SAAS,CAAC,EAAC,QAAQ,EAAE,iBAAiB,EAAC,CAAC;;0BAAA;IA8EzC,yBAAC;AAAD,CA7EA,AA6EC,CA7EuC,eAAe,GA6EtD","file":"flex-order.js","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer,\n  SimpleChanges,\n} from '@angular/core';\nimport {MediaQueryActivation} from '../media-query/media-query-activation';\nimport {MediaQueryAdapter} from '../media-query/media-query-adapter';\nimport {MediaQueryChanges, OnMediaQueryChanges} from '../media-query/media-query-changes';\nimport {BaseFxDirective} from './base';\n\n/**\n * 'flex-order' flexbox styling directive\n * Configures the positional ordering of the element in a sorted layout container\n * @see https://css-tricks.com/almanac/properties/o/order/\n */\n@Directive({selector: '[fx-flex-order]'})\nexport class FlexOrderDirective extends BaseFxDirective implements OnInit, OnChanges,\n                                                                      OnMediaQueryChanges {\n  /**\n   * MediaQuery Activation Tracker\n   */\n  private _mqActivation: MediaQueryActivation;\n\n  @Input('fx-flex-order') order;\n\n  // *******************************************************\n  // Optional input variations to support mediaQuery triggers\n  // *******************************************************\n\n  @Input('fx-flex-order.xs') orderXs;\n  @Input('fx-flex-order.gt-xs') orderGtXs;\n  @Input('fx-flex-order.sm') orderSm;\n  @Input('fx-flex-order.gt-sm') orderGtSm;\n  @Input('fx-flex-order.md') orderMd;\n  @Input('fx-flex-order.gt-md') orderGtMd;\n  @Input('fx-flex-order.lg') orderLg;\n  @Input('fx-flex-order.gt-lg') orderGtLg;\n  @Input('fx-flex-order.xl') orderXl;\n\n  constructor(private _mqa: MediaQueryAdapter, elRef: ElementRef, renderer: Renderer) {\n    super(elRef, renderer);\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    let activated = this._mqActivation;\n    let activationChange = activated && changes[activated.activatedInputKey] != null;\n\n    if (changes['order'] != null || activationChange) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._mqActivation = this._mqa.attach(this, 'order', '1');\n    this._updateWithValue();\n  }\n\n  /**\n   *  Special mql callback used by MediaQueryActivation when a mql event occurs\n   */\n  onMediaQueryChanges(changes: MediaQueryChanges) {\n    this._updateWithValue(changes.current.value);\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  _updateWithValue(value?: string) {\n    value = value || this.order || '1';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n\n  _buildCSS(value) {\n    value = parseInt(value, 10);\n    return {order: isNaN(value) ? 0 : value};\n  }\n}\n"]}